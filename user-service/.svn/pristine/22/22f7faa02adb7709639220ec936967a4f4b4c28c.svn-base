package com.therounds;


import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLException;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;


import javax.ws.rs.core.Response;

import org.json.JSONException;
import org.json.JSONObject;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.therounds.model.SQLiteJDBC;
import com.therounds.model.User;
import com.therounds.model.Users;

/**
 * Root resource (exposed at "myresource" path)
 */
@Path("myresource")
public class MyResource {

    /**
     * Method handling HTTP GET requests. The returned object will be sent
     * to the client as "text/plain" media type.
     *
     * @return String that will be returned as jason response.
     */
    @GET
    @Produces(MediaType.APPLICATION_JSON)
    public String getIt() {
        return "Got it!";
    }
    
	@GET
	@Path("/users")
	@Produces("application/json;")
	public Users getAllUsers(){
		SQLiteJDBC db = new SQLiteJDBC();
		return db.getUsers();
	}  

	
	@GET
	@Path("/users/{id}")
	@Produces("application/json;")
	public User getUserById(@PathParam("id") int id) {
		SQLiteJDBC db = new SQLiteJDBC();
		return db.getUser(id);
	}
    
	
	@DELETE
	@Path("/users/{id}")
	@Produces("application/json;")
	public void delUserById(@PathParam("id") int id) {
		SQLiteJDBC db = new SQLiteJDBC();
		db.deleteUser(id);
	}
	
	
	
	
	@POST
	@Path("/users")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response createUser(User user) throws URISyntaxException{
		try {
		System.out.println("first "+ user.getFirstName());
		System.out.println("last "+ user.getLastName());
		System.out.println("id "+ user.getId());
		System.out.println("pass "+ user.getPassword());
		System.out.println("uri "+ user.getUri());
		System.out.println("email "+ user.getEmail());
		
		SQLiteJDBC db = new SQLiteJDBC();
		db.insertUser(user);

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
		return Response.status(201)
				.contentLocation(new URI("/user-management/users/123")).build();
		
	}
	
	@PUT
	@Path("/users/{id}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON)
	public User updateUser(@PathParam("id") int id, User user) throws URISyntaxException {
		System.out.println("helloo!");
		try {
			System.out.println("first "+ user.getFirstName());
			System.out.println("last "+ user.getLastName());
			System.out.println("id "+ user.getId());
			System.out.println("pass "+ user.getPassword());
			System.out.println("uri "+ user.getUri());
			System.out.println("email "+ user.getEmail());
			
			SQLiteJDBC db = new SQLiteJDBC();
			
			return db.updateUser(user);
			
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			
			return null;
		}
	
	
	
}



